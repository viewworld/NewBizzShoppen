Selleo::ETemplate
====================================

ETemplate is a plugin that facilitates managing and using email templates in rails application


How to use ETemplate
====================================

------------------------------------------
Install plugin by following command:
------------------------------------------
 ruby script/plugin install -e https://svn.selleo.com/base/e_template
 select model name for e_template
 select mailer name

------------------------------------------
Install and attach required email validator
------------------------------------------
  gem install alexdunae-validates_email_format_of
  gem install liquid

  #environment.rb
    config.gem "alexdunae-validates_email_format_of", :lib => "validates_email_format_of"
    config.gem 'liquid'

  RESTART APPLICATION SERVER

------------------------------------------
Perform migrations by following command:
------------------------------------------
 rake db:migrate

------------------------------------------
Move javascript file
------------------------------------------
 move file from view/#{your_e_template_view_directory_name}/cursor_insertion.js to public/javascripts
 example:
 view/email_templates/cursor_insertion.js

------------------------------------------
Link to plugin features:
------------------------------------------
  new route should be automatically added to config/routes.rb
  The route is a controller based on model name entered on installation
  ie. with EmailTemplate route is email_templates_path

------------------------------------------
Adding liquid methods to models which will be used in templates:
------------------------------------------
  There are 3 ways to do so:
  ### PREFERRED - section "Filds available" which is in _form_fields.dryml depends on this method ###
  1) Add to_liquid instance method to model which should return hash:
    Example:
    class User < ActiveRecord::Base
      LIQUID_METHODS = lambda {|obj| {
        "first_name" => obj.try.first_name, "last_name" => obj.try.last_name,
        "email" => obj.try.email, "phone" => obj.try.phone, "mobile" => obj.try.mobile}
      }
      def to_liquid
        LIQUID_METHODS.call(self)
      end
    end
  ### METHODS NOT VISIBLE IN FIELDS AVAILABLE SECTION ###
  2) Add methods to act as liquid methods
    Example:
    class User < ActiveRecord::Base
      liquid_methods :title, :full_name
      def full_name
        "#{title} #{first_name} #{last_name}"
      end

      def title
        "Mr."
      end
    end
  ### METHODS NOT VISIBLE IN FIELDS AVAILABLE SECTION ###
  3) Add methods to model called LiquidProxy
    Example:
    class LiquidProxy < Liquid::Drop
      def top_sales
        Shop.current.products.find(:all, :order => 'sales', :limit => 10 )
      end
    end

------------------------------------------
Use liquid objects and methods in template
------------------------------------------
  #body:
  *******************************
  Hello {{ user.first | upcase }}
  *******************************
  => Hello MATTHEW

  #be sure that object user is passed to render method when sending email
  example:
  @email_template.deliver_to(params[:email], {:user => @user}) if @user = User.find_by_email(params[:email])


Copyright (c) 2009 meceo00@gmail.com SELLEO, released under the MIT license
