<div class="pdd_10 no_pdd_t">
    <fieldset class="inputs labels_ta_r labels_200">
      <ol class="align_inputs">
        <%= render :partial => "list_fields", :locals => {:f => form}  %>
        <div style="display: none">
        <%= form.input :sourceable_items, :collection => [], :as => :select, :multiple => true %>
        <%= form.input :tag_group_items, :collection => [], :as => :select, :multiple => true %>
        </div>
      </ol>
    </fieldset>

  <ul id="ul_sources_list">
  <%= form.fields_for :newsletter_sources, @newsletter_list.newsletter_sources.without_tags_and_custom do |builder| %>
    <li><%= render :partial => "newsletter_sources_fields", :locals => {:f => builder} %></li>
  <% end %>
  </ul>

  <% tag_groups = @newsletter_list.newsletter_sources.with_tags.map(&:sourceable) %>
  <% tag_groups.each do |tag_group| %>
      <ul class="droppable" id="tag_group_<%= tag_group.new_record? ? "new#{Time.now.to_f.to_s.gsub(".", "")}" : tag_group.id %>" style="background-color: #609d00; padding: 4px; margin: 4px;">
        <% tag_group.tags.each do |tag| %>
            <li class="draggable" style="background-color: #fafad2;margin: 4px;" id="tag_<%= tag.id %>"><%= tag.name %></li>
        <% end %>

      </ul>
  <% end %>

  <div id="newsletter_sources_tags"></div>

  <%= t("newsletter.newsletter_lists.form.keyword_for_autocompleter") %><%= text_field_tag "autocompleter", nil %>

  <a data-remote="true" data-method="get" id="autocompleter_sourceable_form" href="<%= sourceable_for_search_newsletters_newsletter_lists_path(:format => :js) %>" class="display:none"></a>

</div>


<script language="javascript">
    $(document).ready(function() {
        jQuery.ajaxSetup({
            'beforeSend': function(xhr) {
                xhr.setRequestHeader("Accept", "text/javascript")
            }
        });
        $("#autocompleter").autocomplete({
                    url : '<%= sourceable_for_search_newsletters_newsletter_lists_path(:format => :js) %>',
                    mustMatch : false
                }
        ).result(function(event, item) {
                    if(item[1] == "ActsAsTaggableOn::Tag"){
                        tmp_id = "new" + new Date().getTime().toString();
                        tags_tag_groups[item[2].toString()] = tmp_id;
                        $("<ul  class='droppable' id='tag_group_" + tmp_id + "' style='background-color: #bc8f8f; padding: 4px; margin: 4px;'><li class='draggable' style='background-color: #fafad2;margin: 4px;' id='tag_" + item[2] + "'>" +item[0]+ "</li></ul>").insertBefore("#newsletter_sources_tags")
                        init_sortable();
                    }
                    else
                    {
                        $("#newsletter_list_sourceable_items").
                                    append($("<option></option>").
                                    attr("value", item[1] + "_" + item[2]).
                                    text(item[0]));
                        $('#autocompleter').val('');

                        $("#ul_sources_list").append("<li>" + item[0] + "</li>");
                    }

                });

        $("#autocompleter").autocomplete('<%= sourceable_for_search_newsletters_newsletter_lists_path(:format => :js) %>', function(event, data, formatted) {
        });
    });

    function init_sortable(){
    $(".droppable").sortable({
        revert: "invalid",
        items: "li",
        connectWith: ".droppable",
        receive: handle_receive
    });
    }

    init_sortable();

    function handle_receive(event, ui){
        window.tags_tag_groups[ui.item.attr("id").split("_").reverse()[0]] = $(this).attr('id').split("_").reverse()[0].toString();
        alert(ui.item.attr('id') + " => " + $(this).attr('id'));
    }

    function select_sourceable_items(){
        $("#newsletter_list_sourceable_items option").each(function()
        {
            $(this).attr("selected","selected");
        });

        $("#newsletter_list_tag_group_items option").each(function()
        {
            $(this).attr("selected","selected");
        });
    }

    var tags_tag_groups = [];

    <% tag_groups.each do |tag_group| %>
        <% tag_group.tags.each do |tag| %>
            <%= "tags_tag_groups['#{tag.id}'] = '#{tag_group.id}'" %>
        <% end %>
    <% end %>

    function serialize_tag_groups_items(){
        $('#newsletter_list_tag_group_items').find('option').remove();
        $.each(tags_tag_groups, function(index, value) {
            if(value != undefined){
                $("#newsletter_list_tag_group_items").
                            append($("<option></option>").
                            attr("value", index.toString() + ":" + value).
                            text("1"));
            }
        });


    }
</script>