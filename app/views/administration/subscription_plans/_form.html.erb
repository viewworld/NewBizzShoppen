<%= javascript_include_tag :ckeditor %>
<div class="column_left">
  <div class="pdd_10 no_pdd_t">
    <fieldset class="inputs labels_ta_r labels_200">
      <ol class="align_inputs">
        <%= form.input :name %>
        <%= form.input :subscription_text, :as => :ckeditor, :input_html => {:width => '320px', :height => '150px', :toolbar => "Lite"}, :wrapper_html => {:class => "text"} %>
        <%= form.input :subscription_period %>
        <%= form.input :billing_cycle %>
        <%= form.input :lockup_period %>
        <%= form.input :billing_period %>
        <%= form.input :free_period, :input_html => { :onkeyup => "enable_free_deals_in_free_period()"} %>
        <%= form.input :currency_id, :collection => currencies_for_select %>
        <%= form.input :seller_id, :collection => Seller.all, :include_blank => false %>
        <%= form.input :assigned_roles, :collection => SubscriptionPlan::ROLES.map { |r| [r.to_s.humanize, r] }, :include_blank => false, :input_html => { :onchange => "switch_roles();load_subscription_plans();", :style => "height:100px", :size => 5, :multiple => true } %>
        <% if @subscription_plan.persisted? %>
            <li class="string">
              <%= label_tag :total_billing %>
              <div class="txt"><strong><%= as_currency(@subscription_plan.total_billing, @subscription_plan.currency) %></strong></div>
            </li>
        <% end %>
      </ol>
    </fieldset>
  </div>
</div>

<div class="column_right">
  <div class="pdd_10 no_pdd_t">
    <fieldset class="inputs labels_ta_r labels_200">
      <ol class="align_inputs">
        <%= form.input :is_active, :as => :boolean %>
        <%= form.input :can_be_upgraded, :as => :boolean %>
        <%= form.input :can_be_downgraded, :as => :boolean %>
        <span id="additional_features">
        <%= form.input :team_buyers, :as => :boolean %>
        <%= form.input :big_buyer, :as => :boolean %>
        <%= form.input :deal_maker, :as => :boolean %>
        <%= form.input :free_deals_in_free_period %>
        </span>
        <%= form.input :use_paypal, :as => :boolean, :onclick => "switch_use_paypal_features()" %>
        <span id="use_paypal_features">
            <%= form.input :paypal_retries %>
            <%= form.input :automatic_downgrading, :as => :boolean, :onclick => "switch_automatic_downgrading()" %>
            <span id="automatic_downgrading_subscription_selection">
                <%= form.input :automatic_downgrade_subscription_plan_id, :as => :select,
                               :collection => SubscriptionPlan.without_paypal.for_roles(@subscription_plan.assigned_roles).where("id NOT in (?)", @subscription_plan.new_record? ? 0 : @subscription_plan.id),
                               :required => true, :include_blank => false %>
            </span>
          <span id="paypal_billing_at_start_selection">
            <%= form.input :paypal_billing_at_start, :as => :radio, :collection => SubscriptionPlan::PAYPAL_BILLING_TYPE.map { |bt| [t("models.subscription_plan.billing_types.#{bt.first}"), bt.last] } %>
          </span>
        </span>
      </ol>
    </fieldset>
  </div>
</div>

<clb/>

<%= form.fields_for :subscription_plan_lines, @subscription_plan.subscription_plan_lines do |builder| %>
    <%= render :partial => "subscription_plan_line_fields", :locals => {:f => builder} %>
<% end %>

<div class="nested_subscription_plan_lines_fields_container"></div>

<hl/>
<div class="pdd_20" style="padding-top:10px">
  <%= bt_link_to :plus, t("administration.subscription_plans.form.new_line"), "javascript:void(0)", :onclick => "#{fields_for_subscription_plan_line_fields(form)}" %>
</div>

<clb/>

<script>
    var nestedFormsCount = <%= @subscription_plan.subscription_plan_lines.size %>;

    function add_subscription_plan_line(link, content) {
        var new_id = new Date().getTime();
        content = content.replace(/subscription_plan_subscription_plan_lines_attributes_\d+/g, "subscription_plan_subscription_plan_lines_attributes_" + nestedFormsCount.toString());
        content = content.replace(/subscription_plan\[subscription_plan_lines_attributes\]\[\d+\]/g, "subscription_plan[subscription_plan_lines_attributes][" + new_id.toString() + "]");
        $('.nested_subscription_plan_lines_fields_container:last').append(content);
        nestedFormsCount = nestedFormsCount + 1;
    }

    function remove_subscription_plan_line(id, record_id) {
        nestedFormsCount = nestedFormsCount - 1;

        if (record_id == null) {
            $('#subscription_plan_line_field_form_' + id).remove();
        }
        else {
            $('#subscription_plan_line_field_form_' + id).hide();
            $('#destroy_hidden_field_' + record_id.toString()).val('true')
        }

    }

    function switch_roles(){
        if($('#subscription_plan_assigned_roles').val() != null){
            if($.inArray("member", $('#subscription_plan_assigned_roles').val()) >= 0){
                $('#additional_features').hide();
            }
            else  {
                $('#additional_features').show();
            }
        }
    }

    function switch_automatic_downgrading(){
        if($('#subscription_plan_automatic_downgrading').attr('checked')){
            $('#automatic_downgrading_subscription_selection').show();
        }
        else {
            $('#automatic_downgrading_subscription_selection').hide();
        }

    }

    function switch_use_paypal_features(){
        if($('#subscription_plan_use_paypal').attr('checked')){
            $('#use_paypal_features').show();
        }
        else {
            $('#use_paypal_features').hide();
            $('#subscription_plan_automatic_downgrading').attr('checked', '');
            switch_automatic_downgrading();
        }
    }

    function load_subscription_plans(){
        $.ajax({
            type: "GET",
            url: "<%= fetch_subscription_plans_administration_subscription_plans_path -%>.js",
            data: "assigned_roles=" + $('#subscription_plan_assigned_roles').val() + "&id=" + '<%= @subscription_plan.new_record? ? '' : @subscription_plan.id -%>'
        });
    }

    function enable_free_deals_in_free_period(){
        if(jQuery.trim($('#subscription_plan_free_period').val()) == ""){
            $('#subscription_plan_free_deals_in_free_period').attr("disabled", "true");
            //$('#subscription_plan_paypal_billing_at_start_true').attr("disabled", "true");
            $('#subscription_plan_paypal_billing_at_start_false').attr("disabled", "true");
                        $('#subscription_plan_paypal_billing_at_start_true').attr("checked", "true");
        }
        else {
            $('#subscription_plan_free_deals_in_free_period').attr("disabled", "");
            //$('#subscription_plan_paypal_billing_at_start_true').attr("disabled", "");
            $('#subscription_plan_paypal_billing_at_start_false').attr("disabled", "");
        }
    }


    switch_roles();
    switch_use_paypal_features();
    switch_automatic_downgrading();
    enable_free_deals_in_free_period()
</script>