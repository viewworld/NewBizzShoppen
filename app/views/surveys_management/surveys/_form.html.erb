<ol>
<% SurveyQuestion::QUESTION_TYPES.each do |qtype| %>
    <li class="draggable_question_type survey_question" data-qtype="<%= qtype %>" style="border: 2px green solid;" data-id="null"><div><%= t("surveys_management.shared.question_types.type#{qtype}") %></div></li>
<% end %>
</ol>

  <div class="pdd_10 no_pdd_t">
    <fieldset class="inputs labels_ta_r">
      <ol class="align_inputs">
        <%= form.input :title %>

      </ol>
    </fieldset>
  </div>

<ol style="border: 2px green dashed" class="survey_questions_container sortable">
  <%= render :partial => "survey_questions", :locals => { :survey_questions => @survey.survey_questions.without_nested } %>
</ol>


<script>
    function removeQuestion(id){
        if(confirm("<%= t("common.confirmation") %>")){
            $.ajax({url: "/surveys_management/surveys/<%= @survey.id %>/survey_questions/" + id, type: "DELETE"});
        }
    }

    function editQuestion(id, parent_id){
        $.colorbox({href: "/surveys_management/surveys/<%= @survey.id %>/survey_questions/" + id + "/edit?parent_id=" + (!!parent_id ? parent_id : ''),
            width: 600, height: 500
        });
    }

    function updateQuestionsOrder(){
        $.post("/surveys_management/surveys/<%= @survey.id %>/survey_questions/sort", { ids: serialize() });
    }

    $(function(){
        $("ol.survey_questions_container").nestedSortable({
            placeholder: 'placeholder',
            forcePlaceholderSize:true,
            handle: 'div',
            helper: 'clone',
            items: 'li',
            opacity: .6,
            revert: 250,
            tabSize: 25,
            tolerance: 'pointer',
            toleranceElement: '> div',
            update: function(event, ui) {
                if(ui.item.hasClass("draggable_question")){
                    currentId = ui.item.attr("data-id");
                    prevParent = findQuestionParent(currentId, hQuestions);
                    currentParent = findQuestionParent(currentId, hSerialize());
                    if(prevParent != currentParent){
                        if(currentParent != null){
                            editQuestion(currentId, currentParent)
                        } else {
                            $.ajax({url: "/surveys_management/surveys/<%= @survey.id %>/survey_questions/" + currentId + "/remove_parent", type: "PUT"});
                            updateQuestionsOrder();
                        }
                    } else {
                        updateQuestionsOrder();
                    }

                    hQuestions = hSerialize();
                }
            },
            maxLevels: 2
        }).disableSelection();

        $("li.draggable_question_type").draggable({
            revert: "invalid",
            connectToSortable:"ol.survey_questions_container",
            helper:"clone",
            stop: function(event, ui){
                setTimeout(function(){
                    orderArray = serialize();
                    position = orderArray.indexOf("null") + 1;
                    if(position > 0){
                        currentParent = findQuestionParent("null", hSerialize());
                        $.colorbox({href: "/surveys_management/surveys/<%= @survey.id %>/survey_questions/new?position=" + position + "&question_type=" + $(ui.helper).attr("data-qtype") + "&parent_id=" + (!!currentParent ? currentParent : ''),
                            width: 600, height: 500,
                            onClosed: function(){
                                $('ol.survey_questions_container').find("li[data-id=null]").remove();
                            }});
                    }
                }, 600);
            }
        });
    });

    function recurNodes(node)
    {
        node = $(node);
        var val = [node.attr('data-id')];
        var childNodes = node.children('ol').children('li');
        if(childNodes && childNodes.length > 0)
        {
            for(var i=0; i<childNodes.length; i++) val.push(recurNodes(childNodes[i]));
        }
        return val.length == 1 ? val[0] : val;
    }

    function serialize()
    {
        var nodes = $("ol.survey_questions_container").children('li');
        var result = [];
        for(var i=0; i<nodes.length; i++) result.push(recurNodes(nodes[i]));
        return $.map(result, function(n){ return n });
    }

    function hRecurNodes(node, parent, result)
    {
        node = $(node);
        result.push([node.attr('data-id'), parent]);
        var childNodes = node.children('ol').children('li');
        if(childNodes && childNodes.length > 0)
        {
            for(var i=0; i<childNodes.length; i++) hRecurNodes(childNodes[i], node.attr('data-id'), result);
        }
    }

    function hSerialize()
    {
        var nodes = $("ol.sortable").children('li');
        var result = [];
        for(var i=0; i<nodes.length; i++) hRecurNodes(nodes[i], null, result);
        return result
    }

    function findQuestionParent(id, _questions){
        pair = null;
        _questions.every(function(_pair){
            if(_pair[0].toString() == id.toString()){
                pair = _pair.slice()
            }

            return pair == null;
        });

        return pair == null ? null : pair[1];
    }

    var hQuestions = [];

    $(function(){
        hQuestions = hSerialize();
    });
</script>